# Copyright (c) 2020 Intel Corporation.

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

version: '3.6'

services:

  ##----Start: EIS Base Images -- This Base images must be included for building any EIS servcies ----
  ## Define ia_eisbase service
  ia_eisbase:
    build:
      context: $PWD/../common
      dockerfile: $PWD/../common/dockerfiles/Dockerfile.eisbase
      args:
          UBUNTU_IMAGE_VERSION: ${UBUNTU_IMAGE_VERSION}
          EIS_VERSION: ${EIS_VERSION}
          HOST_TIME_ZONE: ${HOST_TIME_ZONE}
          GO_VERSION: ${GO_VERSION}
    image: ${DOCKER_REGISTRY}ia_eisbase:${EIS_VERSION}

  ## Define ia_common service
  ia_common:
    depends_on:
      - ia_eisbase
    build:
      context: $PWD/../common
      dockerfile: $PWD/../common/dockerfiles/Dockerfile.common
      args:
          EIS_VERSION: ${EIS_VERSION}
          # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
          CMAKE_BUILD_TYPE: "Release"
          DOCKER_REGISTRY: ${DOCKER_REGISTRY}
    read_only: true
    image: ${DOCKER_REGISTRY}ia_common:${EIS_VERSION}

  ## Define ia_openvino_base service
  ia_openvino_base:
    depends_on:
      - ia_video_common
    build:
      context: $PWD/../common/video
      dockerfile: $PWD/../common/video/Dockerfile.openvino
      args:
        EIS_VERSION: ${EIS_VERSION}
        DOCKER_REGISTRY: ${DOCKER_REGISTRY}
        OPENVINO_IMAGE_VERSION: ${OPENVINO_IMAGE_VERSION}
    read_only: true
    image: ${DOCKER_REGISTRY}ia_openvino_base:${EIS_VERSION}

  ##----End: EIS Base Images---- -- This Base images must be included for building any EIS servcies ----

  ## Define ETCD UI service - must be included to view ETCD data over web UI
  ia_etcd_ui:
    depends_on:
      - ia_common
    build:
      context: $PWD/../EtcdUI
      dockerfile: $PWD/../EtcdUI/Dockerfile
      args:
        ETCD_VERSION: ${ETCD_VERSION}
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        DOCKER_REGISTRY: ${DOCKER_REGISTRY}
    read_only: true
    image: ${DOCKER_REGISTRY}ia_etcd_ui:${EIS_VERSION}
    container_name: ia_etcd_ui
    hostname: ia_etcd_ui
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "EtcdUI"
      DEV_MODE: ${DEV_MODE}
      NGINX_PORT: 7071
      CertType: "pem"
      no_proxy: ${eis_no_proxy},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}
      ETCD_PREFIX: ${ETCD_PREFIX}
    volumes:
    - "vol_etcd_keeper:/tmp/nginx"
    user: ${EIS_UID}
    secrets:
    - ca_etcd
    - etcd_EtcdUI_cert
    - etcd_EtcdUI_key
    - etcd_etcduser_cert
    - etcd_etcduser_key

  ia_video_common:
    depends_on:
      - ia_common
    build:
      context: $PWD/../common/video
      dockerfile: $PWD/../common/video/Dockerfile.videocommon
      args:
        EIS_VERSION: ${EIS_VERSION}
        DOCKER_REGISTRY: ${DOCKER_REGISTRY}
        # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
        CMAKE_BUILD_TYPE: Release
    read_only: true
    image: ${DOCKER_REGISTRY}ia_video_common:${EIS_VERSION}

  ##----Start: EIS Containers ----
  ## Define VideoIngestion service

  ia_video_ingestion1:
    depends_on:
      - ia_openvino_base
    build:
      context: $PWD/../VideoIngestion
      dockerfile: $PWD/../VideoIngestion/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
        CMAKE_BUILD_TYPE: "Release"
        WITH_PROFILE: "ON"
        DOCKER_REGISTRY: ${DOCKER_REGISTRY}
    image: ${DOCKER_REGISTRY}ia_video_ingestion:${EIS_VERSION}
    container_name: ia_video_ingestion1
    hostname: ia_video_ingestion1
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoIngestion1"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${eis_no_proxy},${RTSP_CAMERA_IP},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}
      ETCD_PREFIX: ${ETCD_PREFIX}

      # MessageBus Endpoint Configuration
      # Setting Visualizer as a subscriber here for FpsCalculator
      Clients: "VideoAnalytics,Visualizer,RestDataExport,WebVisualizer,TLSRemoteAgent"
      CertType: "zmq"
      ZMQ_RECV_HWM: "50"

      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolut_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      PubTopics: "camera1_stream"
      camera1_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
    volumes:
      - "/dev:/dev"
      - "vol_eis_socket:${SOCKET_DIR}"
      - "/var/tmp:/var/tmp"
    privileged: true
    devices:
      - "/dev/dri"
      - "/dev/:/dev/"
    secrets:
      - ca_etcd
      - etcd_VideoIngestion1_cert
      - etcd_VideoIngestion1_key

  ia_video_ingestion2:
    depends_on:
      - ia_openvino_base
    build:
      context: $PWD/../VideoIngestion
      dockerfile: $PWD/../VideoIngestion/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
        CMAKE_BUILD_TYPE: "Release"
        WITH_PROFILE: "ON"
        DOCKER_REGISTRY: ${DOCKER_REGISTRY}
    image: ${DOCKER_REGISTRY}ia_video_ingestion:${EIS_VERSION}
    container_name: ia_video_ingestion2
    hostname: ia_video_ingestion2
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoIngestion2"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${eis_no_proxy},${RTSP_CAMERA_IP},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}
      ETCD_PREFIX: ${ETCD_PREFIX}

      # MessageBus Endpoint Configuration
      # Setting Visualizer as a subscriber here for FpsCalculator
      Clients: "VideoAnalytics,Visualizer,RestDataExport,WebVisualizer,TLSRemoteAgent"
      CertType: "zmq"
      ZMQ_RECV_HWM: "50"

      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolut_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      PubTopics: "camera2_stream"
      camera2_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
    volumes:
      - "/dev:/dev"
      - "vol_eis_socket:${SOCKET_DIR}"
      - "/var/tmp:/var/tmp"
    privileged: true
    devices:
      - "/dev/dri"
      - "/dev/:/dev/"
    secrets:
      - ca_etcd
      - etcd_VideoIngestion2_cert
      - etcd_VideoIngestion2_key

  ia_video_ingestion3:
    depends_on:
      - ia_openvino_base
    build:
      context: $PWD/../VideoIngestion
      dockerfile: $PWD/../VideoIngestion/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
        CMAKE_BUILD_TYPE: "Release"
        WITH_PROFILE: "ON"
        DOCKER_REGISTRY: ${DOCKER_REGISTRY}
    image: ${DOCKER_REGISTRY}ia_video_ingestion:${EIS_VERSION}
    container_name: ia_video_ingestion3
    hostname: ia_video_ingestion3
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoIngestion3"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${eis_no_proxy},${RTSP_CAMERA_IP},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}
      ETCD_PREFIX: ${ETCD_PREFIX}

      # MessageBus Endpoint Configuration
      # Setting Visualizer as a subscriber here for FpsCalculator
      Clients: "VideoAnalytics,Visualizer,RestDataExport,WebVisualizer,TLSRemoteAgent"
      CertType: "zmq"
      ZMQ_RECV_HWM: "50"

      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolut_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      PubTopics: "camera3_stream"
      camera3_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
    volumes:
      - "/dev:/dev"
      - "vol_eis_socket:${SOCKET_DIR}"
      - "/var/tmp:/var/tmp"
    privileged: true
    devices:
      - "/dev/dri"
      - "/dev/:/dev/"
    secrets:
      - ca_etcd
      - etcd_VideoIngestion3_cert
      - etcd_VideoIngestion3_key

  ia_video_ingestion4:
    depends_on:
      - ia_openvino_base
    build:
      context: $PWD/../VideoIngestion
      dockerfile: $PWD/../VideoIngestion/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
        CMAKE_BUILD_TYPE: "Release"
        WITH_PROFILE: "ON"
        DOCKER_REGISTRY: ${DOCKER_REGISTRY}
    image: ${DOCKER_REGISTRY}ia_video_ingestion:${EIS_VERSION}
    container_name: ia_video_ingestion4
    hostname: ia_video_ingestion4
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoIngestion4"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${eis_no_proxy},${RTSP_CAMERA_IP},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}
      ETCD_PREFIX: ${ETCD_PREFIX}

      # MessageBus Endpoint Configuration
      # Setting Visualizer as a subscriber here for FpsCalculator
      Clients: "VideoAnalytics,Visualizer,RestDataExport,WebVisualizer,TLSRemoteAgent"
      CertType: "zmq"
      ZMQ_RECV_HWM: "50"

      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolut_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      PubTopics: "camera4_stream"
      camera4_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
    volumes:
      - "/dev:/dev"
      - "vol_eis_socket:${SOCKET_DIR}"
      - "/var/tmp:/var/tmp"
    privileged: true
    devices:
      - "/dev/dri"
      - "/dev/:/dev/"
    secrets:
      - ca_etcd
      - etcd_VideoIngestion4_cert
      - etcd_VideoIngestion4_key

  ia_video_ingestion5:
    depends_on:
      - ia_openvino_base
    build:
      context: $PWD/../VideoIngestion
      dockerfile: $PWD/../VideoIngestion/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
        CMAKE_BUILD_TYPE: "Release"
        WITH_PROFILE: "ON"
        DOCKER_REGISTRY: ${DOCKER_REGISTRY}
    image: ${DOCKER_REGISTRY}ia_video_ingestion:${EIS_VERSION}
    container_name: ia_video_ingestion5
    hostname: ia_video_ingestion5
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoIngestion5"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${eis_no_proxy},${RTSP_CAMERA_IP},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}
      ETCD_PREFIX: ${ETCD_PREFIX}

      # MessageBus Endpoint Configuration
      # Setting Visualizer as a subscriber here for FpsCalculator
      Clients: "VideoAnalytics,Visualizer,RestDataExport,WebVisualizer,TLSRemoteAgent"
      CertType: "zmq"
      ZMQ_RECV_HWM: "50"

      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolut_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      PubTopics: "camera5_stream"
      camera5_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
    volumes:
      - "/dev:/dev"
      - "vol_eis_socket:${SOCKET_DIR}"
      - "/var/tmp:/var/tmp"
    privileged: true
    devices:
      - "/dev/dri"
      - "/dev/:/dev/"
    secrets:
      - ca_etcd
      - etcd_VideoIngestion5_cert
      - etcd_VideoIngestion5_key

  ia_video_ingestion6:
    depends_on:
      - ia_openvino_base
    build:
      context: $PWD/../VideoIngestion
      dockerfile: $PWD/../VideoIngestion/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
        CMAKE_BUILD_TYPE: "Release"
        WITH_PROFILE: "ON"
        DOCKER_REGISTRY: ${DOCKER_REGISTRY}
    image: ${DOCKER_REGISTRY}ia_video_ingestion:${EIS_VERSION}
    container_name: ia_video_ingestion6
    hostname: ia_video_ingestion6
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoIngestion6"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${eis_no_proxy},${RTSP_CAMERA_IP},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}
      ETCD_PREFIX: ${ETCD_PREFIX}

      # MessageBus Endpoint Configuration
      # Setting Visualizer as a subscriber here for FpsCalculator
      Clients: "VideoAnalytics,Visualizer,RestDataExport,WebVisualizer,TLSRemoteAgent"
      CertType: "zmq"
      ZMQ_RECV_HWM: "50"

      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolut_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      PubTopics: "camera6_stream"
      camera6_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
    volumes:
      - "/dev:/dev"
      - "vol_eis_socket:${SOCKET_DIR}"
      - "/var/tmp:/var/tmp"
    privileged: true
    devices:
      - "/dev/dri"
      - "/dev/:/dev/"
    secrets:
      - ca_etcd
      - etcd_VideoIngestion6_cert
      - etcd_VideoIngestion6_key

  ia_video_ingestion7:
    depends_on:
      - ia_openvino_base
    build:
      context: $PWD/../VideoIngestion
      dockerfile: $PWD/../VideoIngestion/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
        CMAKE_BUILD_TYPE: "Release"
        WITH_PROFILE: "ON"
        DOCKER_REGISTRY: ${DOCKER_REGISTRY}
    image: ${DOCKER_REGISTRY}ia_video_ingestion:${EIS_VERSION}
    container_name: ia_video_ingestion7
    hostname: ia_video_ingestion7
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoIngestion7"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${eis_no_proxy},${RTSP_CAMERA_IP},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}
      ETCD_PREFIX: ${ETCD_PREFIX}

      # MessageBus Endpoint Configuration
      # Setting Visualizer as a subscriber here for FpsCalculator
      Clients: "VideoAnalytics,Visualizer,RestDataExport,WebVisualizer,TLSRemoteAgent"
      CertType: "zmq"
      ZMQ_RECV_HWM: "50"

      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolut_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      PubTopics: "camera7_stream"
      camera7_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
    volumes:
      - "/dev:/dev"
      - "vol_eis_socket:${SOCKET_DIR}"
      - "/var/tmp:/var/tmp"
    privileged: true
    devices:
      - "/dev/dri"
      - "/dev/:/dev/"
    secrets:
      - ca_etcd
      - etcd_VideoIngestion7_cert
      - etcd_VideoIngestion7_key

  ia_video_ingestion8:
    depends_on:
      - ia_openvino_base
    build:
      context: $PWD/../VideoIngestion
      dockerfile: $PWD/../VideoIngestion/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
        CMAKE_BUILD_TYPE: "Release"
        WITH_PROFILE: "ON"
        DOCKER_REGISTRY: ${DOCKER_REGISTRY}
    image: ${DOCKER_REGISTRY}ia_video_ingestion:${EIS_VERSION}
    container_name: ia_video_ingestion8
    hostname: ia_video_ingestion8
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoIngestion8"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${eis_no_proxy},${RTSP_CAMERA_IP},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}
      ETCD_PREFIX: ${ETCD_PREFIX}

      # MessageBus Endpoint Configuration
      # Setting Visualizer as a subscriber here for FpsCalculator
      Clients: "VideoAnalytics,Visualizer,RestDataExport,WebVisualizer,TLSRemoteAgent"
      CertType: "zmq"
      ZMQ_RECV_HWM: "50"

      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolut_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      PubTopics: "camera8_stream"
      camera8_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
    volumes:
      - "/dev:/dev"
      - "vol_eis_socket:${SOCKET_DIR}"
      - "/var/tmp:/var/tmp"
    privileged: true
    devices:
      - "/dev/dri"
      - "/dev/:/dev/"
    secrets:
      - ca_etcd
      - etcd_VideoIngestion8_cert
      - etcd_VideoIngestion8_key

  ia_video_ingestion9:
    depends_on:
      - ia_openvino_base
    build:
      context: $PWD/../VideoIngestion
      dockerfile: $PWD/../VideoIngestion/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
        CMAKE_BUILD_TYPE: "Release"
        WITH_PROFILE: "ON"
        DOCKER_REGISTRY: ${DOCKER_REGISTRY}
    image: ${DOCKER_REGISTRY}ia_video_ingestion:${EIS_VERSION}
    container_name: ia_video_ingestion9
    hostname: ia_video_ingestion9
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoIngestion9"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${eis_no_proxy},${RTSP_CAMERA_IP},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}
      ETCD_PREFIX: ${ETCD_PREFIX}

      # MessageBus Endpoint Configuration
      # Setting Visualizer as a subscriber here for FpsCalculator
      Clients: "VideoAnalytics,Visualizer,RestDataExport,WebVisualizer,TLSRemoteAgent"
      CertType: "zmq"
      ZMQ_RECV_HWM: "50"

      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolut_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      PubTopics: "camera9_stream"
      camera9_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
    volumes:
      - "/dev:/dev"
      - "vol_eis_socket:${SOCKET_DIR}"
      - "/var/tmp:/var/tmp"
    privileged: true
    devices:
      - "/dev/dri"
      - "/dev/:/dev/"
    secrets:
      - ca_etcd
      - etcd_VideoIngestion9_cert
      - etcd_VideoIngestion9_key

  ia_video_ingestion10:
    depends_on:
      - ia_openvino_base
    build:
      context: $PWD/../VideoIngestion
      dockerfile: $PWD/../VideoIngestion/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
        CMAKE_BUILD_TYPE: "Release"
        WITH_PROFILE: "ON"
        DOCKER_REGISTRY: ${DOCKER_REGISTRY}
    image: ${DOCKER_REGISTRY}ia_video_ingestion:${EIS_VERSION}
    container_name: ia_video_ingestion10
    hostname: ia_video_ingestion10
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoIngestion10"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${eis_no_proxy},${RTSP_CAMERA_IP},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}
      ETCD_PREFIX: ${ETCD_PREFIX}

      # MessageBus Endpoint Configuration
      # Setting Visualizer as a subscriber here for FpsCalculator
      Clients: "VideoAnalytics,Visualizer,RestDataExport,WebVisualizer,TLSRemoteAgent"
      CertType: "zmq"
      ZMQ_RECV_HWM: "50"

      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolut_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      PubTopics: "camera10_stream"
      camera10_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
    volumes:
      - "/dev:/dev"
      - "vol_eis_socket:${SOCKET_DIR}"
      - "/var/tmp:/var/tmp"
    privileged: true
    devices:
      - "/dev/dri"
      - "/dev/:/dev/"
    secrets:
      - ca_etcd
      - etcd_VideoIngestion10_cert
      - etcd_VideoIngestion10_key

  ia_video_ingestion11:
    depends_on:
      - ia_openvino_base
    build:
      context: $PWD/../VideoIngestion
      dockerfile: $PWD/../VideoIngestion/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
        CMAKE_BUILD_TYPE: "Release"
        WITH_PROFILE: "ON"
        DOCKER_REGISTRY: ${DOCKER_REGISTRY}
    image: ${DOCKER_REGISTRY}ia_video_ingestion:${EIS_VERSION}
    container_name: ia_video_ingestion11
    hostname: ia_video_ingestion11
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoIngestion11"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${eis_no_proxy},${RTSP_CAMERA_IP},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}
      ETCD_PREFIX: ${ETCD_PREFIX}

      # MessageBus Endpoint Configuration
      # Setting Visualizer as a subscriber here for FpsCalculator
      Clients: "VideoAnalytics,Visualizer,RestDataExport,WebVisualizer,TLSRemoteAgent"
      CertType: "zmq"
      ZMQ_RECV_HWM: "50"

      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolut_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      PubTopics: "camera11_stream"
      camera11_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
    volumes:
      - "/dev:/dev"
      - "vol_eis_socket:${SOCKET_DIR}"
      - "/var/tmp:/var/tmp"
    privileged: true
    devices:
      - "/dev/dri"
      - "/dev/:/dev/"
    secrets:
      - ca_etcd
      - etcd_VideoIngestion11_cert
      - etcd_VideoIngestion11_key

  ia_video_ingestion12:
    depends_on:
      - ia_openvino_base
    build:
      context: $PWD/../VideoIngestion
      dockerfile: $PWD/../VideoIngestion/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
        CMAKE_BUILD_TYPE: "Release"
        WITH_PROFILE: "ON"
        DOCKER_REGISTRY: ${DOCKER_REGISTRY}
    image: ${DOCKER_REGISTRY}ia_video_ingestion:${EIS_VERSION}
    container_name: ia_video_ingestion12
    hostname: ia_video_ingestion12
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoIngestion12"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${eis_no_proxy},${RTSP_CAMERA_IP},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}
      ETCD_PREFIX: ${ETCD_PREFIX}

      # MessageBus Endpoint Configuration
      # Setting Visualizer as a subscriber here for FpsCalculator
      Clients: "VideoAnalytics,Visualizer,RestDataExport,WebVisualizer,TLSRemoteAgent"
      CertType: "zmq"
      ZMQ_RECV_HWM: "50"

      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolut_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      PubTopics: "camera12_stream"
      camera12_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
    volumes:
      - "/dev:/dev"
      - "vol_eis_socket:${SOCKET_DIR}"
      - "/var/tmp:/var/tmp"
    privileged: true
    devices:
      - "/dev/dri"
      - "/dev/:/dev/"
    secrets:
      - ca_etcd
      - etcd_VideoIngestion12_cert
      - etcd_VideoIngestion12_key

  ia_video_ingestion13:
    depends_on:
      - ia_openvino_base
    build:
      context: $PWD/../VideoIngestion
      dockerfile: $PWD/../VideoIngestion/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
        CMAKE_BUILD_TYPE: "Release"
        WITH_PROFILE: "ON"
        DOCKER_REGISTRY: ${DOCKER_REGISTRY}
    image: ${DOCKER_REGISTRY}ia_video_ingestion:${EIS_VERSION}
    container_name: ia_video_ingestion13
    hostname: ia_video_ingestion13
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoIngestion13"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${eis_no_proxy},${RTSP_CAMERA_IP},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}
      ETCD_PREFIX: ${ETCD_PREFIX}

      # MessageBus Endpoint Configuration
      # Setting Visualizer as a subscriber here for FpsCalculator
      Clients: "VideoAnalytics,Visualizer,RestDataExport,WebVisualizer,TLSRemoteAgent"
      CertType: "zmq"
      ZMQ_RECV_HWM: "50"

      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolut_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      PubTopics: "camera13_stream"
      camera13_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
    volumes:
      - "/dev:/dev"
      - "vol_eis_socket:${SOCKET_DIR}"
      - "/var/tmp:/var/tmp"
    privileged: true
    devices:
      - "/dev/dri"
      - "/dev/:/dev/"
    secrets:
      - ca_etcd
      - etcd_VideoIngestion13_cert
      - etcd_VideoIngestion13_key

  ia_video_ingestion14:
    depends_on:
      - ia_openvino_base
    build:
      context: $PWD/../VideoIngestion
      dockerfile: $PWD/../VideoIngestion/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
        CMAKE_BUILD_TYPE: "Release"
        WITH_PROFILE: "ON"
        DOCKER_REGISTRY: ${DOCKER_REGISTRY}
    image: ${DOCKER_REGISTRY}ia_video_ingestion:${EIS_VERSION}
    container_name: ia_video_ingestion14
    hostname: ia_video_ingestion14
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoIngestion14"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${eis_no_proxy},${RTSP_CAMERA_IP},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}
      ETCD_PREFIX: ${ETCD_PREFIX}

      # MessageBus Endpoint Configuration
      # Setting Visualizer as a subscriber here for FpsCalculator
      Clients: "VideoAnalytics,Visualizer,RestDataExport,WebVisualizer,TLSRemoteAgent"
      CertType: "zmq"
      ZMQ_RECV_HWM: "50"

      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolut_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      PubTopics: "camera14_stream"
      camera14_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
    volumes:
      - "/dev:/dev"
      - "vol_eis_socket:${SOCKET_DIR}"
      - "/var/tmp:/var/tmp"
    privileged: true
    devices:
      - "/dev/dri"
      - "/dev/:/dev/"
    secrets:
      - ca_etcd
      - etcd_VideoIngestion14_cert
      - etcd_VideoIngestion14_key

  ia_video_ingestion15:
    depends_on:
      - ia_openvino_base
    build:
      context: $PWD/../VideoIngestion
      dockerfile: $PWD/../VideoIngestion/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
        CMAKE_BUILD_TYPE: "Release"
        WITH_PROFILE: "ON"
        DOCKER_REGISTRY: ${DOCKER_REGISTRY}
    image: ${DOCKER_REGISTRY}ia_video_ingestion:${EIS_VERSION}
    container_name: ia_video_ingestion15
    hostname: ia_video_ingestion15
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoIngestion15"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${eis_no_proxy},${RTSP_CAMERA_IP},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}
      ETCD_PREFIX: ${ETCD_PREFIX}

      # MessageBus Endpoint Configuration
      # Setting Visualizer as a subscriber here for FpsCalculator
      Clients: "VideoAnalytics,Visualizer,RestDataExport,WebVisualizer,TLSRemoteAgent"
      CertType: "zmq"
      ZMQ_RECV_HWM: "50"

      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolut_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      PubTopics: "camera15_stream"
      camera15_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
    volumes:
      - "/dev:/dev"
      - "vol_eis_socket:${SOCKET_DIR}"
      - "/var/tmp:/var/tmp"
    privileged: true
    devices:
      - "/dev/dri"
      - "/dev/:/dev/"
    secrets:
      - ca_etcd
      - etcd_VideoIngestion15_cert
      - etcd_VideoIngestion15_key

  ia_video_ingestion16:
    depends_on:
      - ia_openvino_base
    build:
      context: $PWD/../VideoIngestion
      dockerfile: $PWD/../VideoIngestion/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
        CMAKE_BUILD_TYPE: "Release"
        WITH_PROFILE: "ON"
        DOCKER_REGISTRY: ${DOCKER_REGISTRY}
    image: ${DOCKER_REGISTRY}ia_video_ingestion:${EIS_VERSION}
    container_name: ia_video_ingestion16
    hostname: ia_video_ingestion16
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoIngestion16"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${eis_no_proxy},${RTSP_CAMERA_IP},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}
      ETCD_PREFIX: ${ETCD_PREFIX}

      # MessageBus Endpoint Configuration
      # Setting Visualizer as a subscriber here for FpsCalculator
      Clients: "VideoAnalytics,Visualizer,RestDataExport,WebVisualizer,TLSRemoteAgent"
      CertType: "zmq"
      ZMQ_RECV_HWM: "50"

      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolut_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      PubTopics: "camera16_stream"
      camera16_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
    volumes:
      - "/dev:/dev"
      - "vol_eis_socket:${SOCKET_DIR}"
      - "/var/tmp:/var/tmp"
    privileged: true
    devices:
      - "/dev/dri"
      - "/dev/:/dev/"
    secrets:
      - ca_etcd
      - etcd_VideoIngestion16_cert
      - etcd_VideoIngestion16_key

  ia_video_ingestion17:
    depends_on:
      - ia_openvino_base
    build:
      context: $PWD/../VideoIngestion
      dockerfile: $PWD/../VideoIngestion/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
        CMAKE_BUILD_TYPE: "Release"
        WITH_PROFILE: "ON"
        DOCKER_REGISTRY: ${DOCKER_REGISTRY}
    image: ${DOCKER_REGISTRY}ia_video_ingestion:${EIS_VERSION}
    container_name: ia_video_ingestion17
    hostname: ia_video_ingestion17
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoIngestion17"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${eis_no_proxy},${RTSP_CAMERA_IP},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}
      ETCD_PREFIX: ${ETCD_PREFIX}

      # MessageBus Endpoint Configuration
      # Setting Visualizer as a subscriber here for FpsCalculator
      Clients: "VideoAnalytics,Visualizer,RestDataExport,WebVisualizer,TLSRemoteAgent"
      CertType: "zmq"
      ZMQ_RECV_HWM: "50"

      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolut_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      PubTopics: "camera17_stream"
      camera17_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
    volumes:
      - "/dev:/dev"
      - "vol_eis_socket:${SOCKET_DIR}"
      - "/var/tmp:/var/tmp"
    privileged: true
    devices:
      - "/dev/dri"
      - "/dev/:/dev/"
    secrets:
      - ca_etcd
      - etcd_VideoIngestion17_cert
      - etcd_VideoIngestion17_key

  ia_video_ingestion18:
    depends_on:
      - ia_openvino_base
    build:
      context: $PWD/../VideoIngestion
      dockerfile: $PWD/../VideoIngestion/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
        CMAKE_BUILD_TYPE: "Release"
        WITH_PROFILE: "ON"
        DOCKER_REGISTRY: ${DOCKER_REGISTRY}
    image: ${DOCKER_REGISTRY}ia_video_ingestion:${EIS_VERSION}
    container_name: ia_video_ingestion18
    hostname: ia_video_ingestion18
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoIngestion18"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${eis_no_proxy},${RTSP_CAMERA_IP},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}
      ETCD_PREFIX: ${ETCD_PREFIX}

      # MessageBus Endpoint Configuration
      # Setting Visualizer as a subscriber here for FpsCalculator
      Clients: "VideoAnalytics,Visualizer,RestDataExport,WebVisualizer,TLSRemoteAgent"
      CertType: "zmq"
      ZMQ_RECV_HWM: "50"

      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolut_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      PubTopics: "camera18_stream"
      camera18_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
    volumes:
      - "/dev:/dev"
      - "vol_eis_socket:${SOCKET_DIR}"
      - "/var/tmp:/var/tmp"
    privileged: true
    devices:
      - "/dev/dri"
      - "/dev/:/dev/"
    secrets:
      - ca_etcd
      - etcd_VideoIngestion18_cert
      - etcd_VideoIngestion18_key

volumes:
  vol_eis_socket:
    driver: local
    driver_opts:
      type: local
      o: bind
      device: ${EIS_INSTALL_PATH}/sockets
  vol_etcd_keeper:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs

secrets:
  ca_etcd:
    file: provision/Certificates/ca/ca_certificate.pem

  etcd_VideoIngestion1_cert:
    file: provision/Certificates/VideoIngestion1/VideoIngestion1_client_certificate.pem
  etcd_VideoIngestion1_key:
    file: provision/Certificates/VideoIngestion1/VideoIngestion1_client_key.pem

  etcd_VideoIngestion2_cert:
    file: provision/Certificates/VideoIngestion2/VideoIngestion2_client_certificate.pem
  etcd_VideoIngestion2_key:
    file: provision/Certificates/VideoIngestion2/VideoIngestion2_client_key.pem

  etcd_VideoIngestion3_cert:
    file: provision/Certificates/VideoIngestion3/VideoIngestion3_client_certificate.pem
  etcd_VideoIngestion3_key:
    file: provision/Certificates/VideoIngestion3/VideoIngestion3_client_key.pem

  etcd_VideoIngestion4_cert:
    file: provision/Certificates/VideoIngestion4/VideoIngestion4_client_certificate.pem
  etcd_VideoIngestion4_key:
    file: provision/Certificates/VideoIngestion4/VideoIngestion4_client_key.pem

  etcd_VideoIngestion5_cert:
    file: provision/Certificates/VideoIngestion5/VideoIngestion5_client_certificate.pem
  etcd_VideoIngestion5_key:
    file: provision/Certificates/VideoIngestion5/VideoIngestion5_client_key.pem

  etcd_VideoIngestion6_cert:
    file: provision/Certificates/VideoIngestion6/VideoIngestion6_client_certificate.pem
  etcd_VideoIngestion6_key:
    file: provision/Certificates/VideoIngestion6/VideoIngestion6_client_key.pem

  etcd_VideoIngestion7_cert:
    file: provision/Certificates/VideoIngestion7/VideoIngestion7_client_certificate.pem
  etcd_VideoIngestion7_key:
    file: provision/Certificates/VideoIngestion7/VideoIngestion7_client_key.pem

  etcd_VideoIngestion8_cert:
    file: provision/Certificates/VideoIngestion8/VideoIngestion8_client_certificate.pem
  etcd_VideoIngestion8_key:
    file: provision/Certificates/VideoIngestion8/VideoIngestion8_client_key.pem

  etcd_VideoIngestion9_cert:
    file: provision/Certificates/VideoIngestion9/VideoIngestion9_client_certificate.pem
  etcd_VideoIngestion9_key:
    file: provision/Certificates/VideoIngestion9/VideoIngestion9_client_key.pem

  etcd_VideoIngestion10_cert:
    file: provision/Certificates/VideoIngestion10/VideoIngestion10_client_certificate.pem
  etcd_VideoIngestion10_key:
    file: provision/Certificates/VideoIngestion10/VideoIngestion10_client_key.pem

  etcd_VideoIngestion11_cert:
    file: provision/Certificates/VideoIngestion11/VideoIngestion11_client_certificate.pem
  etcd_VideoIngestion11_key:
    file: provision/Certificates/VideoIngestion11/VideoIngestion11_client_key.pem

  etcd_VideoIngestion12_cert:
    file: provision/Certificates/VideoIngestion12/VideoIngestion12_client_certificate.pem
  etcd_VideoIngestion12_key:
    file: provision/Certificates/VideoIngestion12/VideoIngestion12_client_key.pem

  etcd_VideoIngestion13_cert:
    file: provision/Certificates/VideoIngestion13/VideoIngestion13_client_certificate.pem
  etcd_VideoIngestion13_key:
    file: provision/Certificates/VideoIngestion13/VideoIngestion13_client_key.pem

  etcd_VideoIngestion14_cert:
    file: provision/Certificates/VideoIngestion14/VideoIngestion14_client_certificate.pem
  etcd_VideoIngestion14_key:
    file: provision/Certificates/VideoIngestion14/VideoIngestion14_client_key.pem

  etcd_VideoIngestion15_cert:
    file: provision/Certificates/VideoIngestion15/VideoIngestion15_client_certificate.pem
  etcd_VideoIngestion15_key:
    file: provision/Certificates/VideoIngestion15/VideoIngestion15_client_key.pem

  etcd_VideoIngestion16_cert:
    file: provision/Certificates/VideoIngestion16/VideoIngestion16_client_certificate.pem
  etcd_VideoIngestion16_key:
    file: provision/Certificates/VideoIngestion16/VideoIngestion16_client_key.pem

  etcd_VideoIngestion17_cert:
    file: provision/Certificates/VideoIngestion17/VideoIngestion17_client_certificate.pem
  etcd_VideoIngestion17_key:
    file: provision/Certificates/VideoIngestion17/VideoIngestion17_client_key.pem

  etcd_VideoIngestion18_cert:
    file: provision/Certificates/VideoIngestion18/VideoIngestion18_client_certificate.pem
  etcd_VideoIngestion18_key:
    file: provision/Certificates/VideoIngestion18/VideoIngestion18_client_key.pem

  etcd_etcduser_cert:
    file: provision/Certificates/root/root_client_certificate.pem
  etcd_etcduser_key:
    file: provision/Certificates/root/root_client_key.pem
  etcd_EtcdUI_cert:
    file: provision/Certificates/EtcdUI/EtcdUI_client_certificate.pem
  etcd_EtcdUI_key:
    file: provision/Certificates/EtcdUI/EtcdUI_client_key.pem
  etcd_Grafana_cert:
    file: provision/Certificates/Grafana/Grafana_client_certificate.pem
  etcd_Grafana_key:
    file: provision/Certificates/Grafana/Grafana_client_key.pem
  etcd_WebVisualizer_cert:
    file: provision/Certificates/WebVisualizer/WebVisualizer_client_certificate.pem
  etcd_WebVisualizer_key:
    file: provision/Certificates/WebVisualizer/WebVisualizer_client_key.pem
  etcd_TLSRemoteAgent_cert:
    file: provision/Certificates/TLSRemoteAgent/TLSRemoteAgent_client_certificate.pem
  etcd_TLSRemoteAgent_key:
    file: provision/Certificates/TLSRemoteAgent/TLSRemoteAgent_client_key.pem
